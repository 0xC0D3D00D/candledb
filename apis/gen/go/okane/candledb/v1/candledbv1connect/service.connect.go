// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: okane/candledb/v1/service.proto

package candledbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/0xc0d3d00d/candledb/apis/gen/go/okane/candledb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CandleDBServiceName is the fully-qualified name of the CandleDBService service.
	CandleDBServiceName = "okane.candledb.v1.CandleDBService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CandleDBServiceSaveCandlesProcedure is the fully-qualified name of the CandleDBService's
	// SaveCandles RPC.
	CandleDBServiceSaveCandlesProcedure = "/okane.candledb.v1.CandleDBService/SaveCandles"
	// CandleDBServiceGetCandlesProcedure is the fully-qualified name of the CandleDBService's
	// GetCandles RPC.
	CandleDBServiceGetCandlesProcedure = "/okane.candledb.v1.CandleDBService/GetCandles"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	candleDBServiceServiceDescriptor           = v1.File_okane_candledb_v1_service_proto.Services().ByName("CandleDBService")
	candleDBServiceSaveCandlesMethodDescriptor = candleDBServiceServiceDescriptor.Methods().ByName("SaveCandles")
	candleDBServiceGetCandlesMethodDescriptor  = candleDBServiceServiceDescriptor.Methods().ByName("GetCandles")
)

// CandleDBServiceClient is a client for the okane.candledb.v1.CandleDBService service.
type CandleDBServiceClient interface {
	// Save candles in the database
	SaveCandles(context.Context, *connect.Request[v1.SaveCandlesRequest]) (*connect.Response[v1.SaveCandlesResponse], error)
	// Get candles from the database
	GetCandles(context.Context, *connect.Request[v1.GetCandlesRequest]) (*connect.Response[v1.GetCandlesResponse], error)
}

// NewCandleDBServiceClient constructs a client for the okane.candledb.v1.CandleDBService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCandleDBServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CandleDBServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &candleDBServiceClient{
		saveCandles: connect.NewClient[v1.SaveCandlesRequest, v1.SaveCandlesResponse](
			httpClient,
			baseURL+CandleDBServiceSaveCandlesProcedure,
			connect.WithSchema(candleDBServiceSaveCandlesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getCandles: connect.NewClient[v1.GetCandlesRequest, v1.GetCandlesResponse](
			httpClient,
			baseURL+CandleDBServiceGetCandlesProcedure,
			connect.WithSchema(candleDBServiceGetCandlesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// candleDBServiceClient implements CandleDBServiceClient.
type candleDBServiceClient struct {
	saveCandles *connect.Client[v1.SaveCandlesRequest, v1.SaveCandlesResponse]
	getCandles  *connect.Client[v1.GetCandlesRequest, v1.GetCandlesResponse]
}

// SaveCandles calls okane.candledb.v1.CandleDBService.SaveCandles.
func (c *candleDBServiceClient) SaveCandles(ctx context.Context, req *connect.Request[v1.SaveCandlesRequest]) (*connect.Response[v1.SaveCandlesResponse], error) {
	return c.saveCandles.CallUnary(ctx, req)
}

// GetCandles calls okane.candledb.v1.CandleDBService.GetCandles.
func (c *candleDBServiceClient) GetCandles(ctx context.Context, req *connect.Request[v1.GetCandlesRequest]) (*connect.Response[v1.GetCandlesResponse], error) {
	return c.getCandles.CallUnary(ctx, req)
}

// CandleDBServiceHandler is an implementation of the okane.candledb.v1.CandleDBService service.
type CandleDBServiceHandler interface {
	// Save candles in the database
	SaveCandles(context.Context, *connect.Request[v1.SaveCandlesRequest]) (*connect.Response[v1.SaveCandlesResponse], error)
	// Get candles from the database
	GetCandles(context.Context, *connect.Request[v1.GetCandlesRequest]) (*connect.Response[v1.GetCandlesResponse], error)
}

// NewCandleDBServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCandleDBServiceHandler(svc CandleDBServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	candleDBServiceSaveCandlesHandler := connect.NewUnaryHandler(
		CandleDBServiceSaveCandlesProcedure,
		svc.SaveCandles,
		connect.WithSchema(candleDBServiceSaveCandlesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	candleDBServiceGetCandlesHandler := connect.NewUnaryHandler(
		CandleDBServiceGetCandlesProcedure,
		svc.GetCandles,
		connect.WithSchema(candleDBServiceGetCandlesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/okane.candledb.v1.CandleDBService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CandleDBServiceSaveCandlesProcedure:
			candleDBServiceSaveCandlesHandler.ServeHTTP(w, r)
		case CandleDBServiceGetCandlesProcedure:
			candleDBServiceGetCandlesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCandleDBServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCandleDBServiceHandler struct{}

func (UnimplementedCandleDBServiceHandler) SaveCandles(context.Context, *connect.Request[v1.SaveCandlesRequest]) (*connect.Response[v1.SaveCandlesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("okane.candledb.v1.CandleDBService.SaveCandles is not implemented"))
}

func (UnimplementedCandleDBServiceHandler) GetCandles(context.Context, *connect.Request[v1.GetCandlesRequest]) (*connect.Response[v1.GetCandlesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("okane.candledb.v1.CandleDBService.GetCandles is not implemented"))
}
